{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleSearchChange","e","setState","searchQuerry","target","value","searchRequest","state","fetch","then","response","json","weather","isLoading","handleSearchSubmit","key","this","className","main","temp","type","placeholder","onChange","onKeyDown","name","sys","country","DateTime","fromSeconds","dt","toLocaleString","DATE_HUGE","Math","round","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAOqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CACZC,aAAcF,EAAEG,OAAOC,SAXR,EAenBC,cAAgB,WACd,IAAQH,EAAiB,EAAKI,MAAtBJ,aACRK,MAAM,GAAD,OApBO,2CAoBP,qBAAwBL,EAAxB,kBArBO,mCAqBP,kBACFM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OACJ,EAAKR,SAAS,CAAEU,QAASF,EAAUG,WAAW,QApBjC,EAwBnBC,mBAAqB,SAACb,GACpB,IAAQY,EAAc,EAAKN,MAAnBM,UACM,UAAVZ,EAAEc,KAAmBF,GAGzB,EAAKX,SACH,CACEW,WAAW,GAEb,EAAKP,gBA/BP,EAAKC,MAAQ,CACXJ,aAAc,GACdS,QAAS,KACTC,WAAW,GALI,E,0CAqCnB,WACE,MAA6CG,KAAKT,MAA1CJ,EAAR,EAAQA,aAAcS,EAAtB,EAAsBA,QAASC,EAA/B,EAA+BA,UAE/B,OACE,sBACEI,UACEL,GAAWA,EAAQM,KAAKC,KAAO,EAAI,iBAAmB,YAF1D,UAKE,uBACEC,KAAK,OACLC,YAAY,YACZJ,UAAU,eACVZ,MAAOF,EACPmB,SAAUN,KAAKhB,mBACfuB,UAAWP,KAAKF,qBAEjBD,EACC,sBAAKI,UAAU,mBAAf,UACG,IACD,qBAAKA,UAAU,cAEf,KACHL,EACC,sBAAKK,UAAU,mBAAf,UACE,sBAAKA,UAAU,WAAf,UACGL,EAAQY,KADX,KACmBZ,EAAQa,IAAIC,WAE/B,qBAAKT,UAAU,OAAf,SACGU,WAASC,YAAYhB,EAAQiB,IAAIC,eAChCH,WAASI,aAGb,sBAAKd,UAAU,kBAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBe,KAAKC,MAAMrB,EAAQM,KAAKC,MAA/C,YACA,qBAAKF,UAAU,UAAf,SAA0BL,EAAQA,QAAQ,GAAGM,aAG/C,Y,GA5EqBgB,aCKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a64a7187.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { DateTime } from \"luxon\";\n\nconst API_KEY = \"33178d46dea4c98a92d98aa6ea4ebc24\";\nconst API_URL = \"https://api.openweathermap.org/data/2.5/\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuerry: \"\",\n      weather: null,\n      isLoading: false,\n    };\n  }\n\n  handleSearchChange = (e) => {\n    this.setState({\n      searchQuerry: e.target.value,\n    });\n  };\n\n  searchRequest = () => {\n    const { searchQuerry } = this.state;\n    fetch(`${API_URL}weather?q=${searchQuerry}&appid=${API_KEY}&units=metric`)\n      .then((response) => response.json())\n      .then((response) =>\n        this.setState({ weather: response, isLoading: false })\n      );\n  };\n\n  handleSearchSubmit = (e) => {\n    const { isLoading } = this.state;\n    if (e.key !== \"Enter\" || isLoading) {\n      return;\n    }\n    this.setState(\n      {\n        isLoading: true,\n      },\n      this.searchRequest\n    );\n  };\n\n  render() {\n    const { searchQuerry, weather, isLoading } = this.state;\n\n    return (\n      <div\n        className={\n          weather && weather.main.temp < 0 ? \"container cold\" : \"container\"\n        }\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          className=\"search-input\"\n          value={searchQuerry}\n          onChange={this.handleSearchChange}\n          onKeyDown={this.handleSearchSubmit}\n        />\n        {isLoading ? (\n          <div className=\"loader-container\">\n            {\" \"}\n            <div className=\"loader\"></div>\n          </div>\n        ) : null}\n        {weather ? (\n          <div className=\"location-wrapper\">\n            <div className=\"location\">\n              {weather.name}, {weather.sys.country}\n            </div>\n            <div className=\"date\">\n              {DateTime.fromSeconds(weather.dt).toLocaleString(\n                DateTime.DATE_HUGE\n              )}\n            </div>\n            <div className=\"weather-wrapper\">\n              <div className=\"temp\">{Math.round(weather.main.temp)} Â°C</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}